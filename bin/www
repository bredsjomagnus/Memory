#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const Gameboard = require('../public/javascripts/gameboard');
var debug = require('debug')('app:server');
var http = require('http');
const WebSocket = require("ws");
var users = [];
// var usersobj = {};
var usersobject = [];
const Gamebrain = require('../src/Memory/gamebrain');
let gamebrain = new Gamebrain();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


const wss = new WebSocket.Server({
    server: server,
    clientTracking: true, // keep track on connected clients
});

wss.adduser = (nickname, ws) => {
    usersobject.push({
        name: nickname,
        websocket: ws
    });
    users.push(nickname);

}

wss.dropuser = (ws) => {
    var deletenick;
    var founduser = false;

    usersobject.forEach((userobj) => {
        if (userobj.websocket === ws) {
            founduser = true;
            console.log("Drop " + userobj.name);
            deletenick = userobj.name;
            users = users.filter( function(deletenick) {
                return deletenick;
            });
            users.splice(users.indexOf(deletenick), 1);
            gamebrain.dropPlayer(deletenick);
        }
    });

    if (founduser) {
        usersobject = usersobject.filter(function(usr) {
           return usr.websocket !== ws;
        });
    }

}

/**
* Takes a nickname and add a figure to make nickname unique.
*
* @param {string} incomingnickname, from new user.
*
* @return {string} unique nickname.
*/
wss.uniquifyname = (incomingnickname) => {
    var incomingnicknamelength = incomingnickname.length;
    var stringdiff;

    counter = 2;
    while(users.indexOf(incomingnickname) !== -1) {
        if (incomingnickname.length == incomingnicknamelength) {
            incomingnickname = incomingnickname + counter;
        } else {
            stringdiff = incomingnickname.length - incomingnicknamelength;
            incomingnickname = incomingnickname.slice(0, -stringdiff);
            incomingnickname = incomingnickname + counter;
        }
        counter++;
    }
    return incomingnickname;
}

// Broadcast data to everyone except one self (ws).
wss.broadcastUsers = (data) => {
    let clients = 0;
    wss.clients.forEach((client) => {
        clients++;
        client.send(data);
    });
    console.log(`Broadcasted users to ${clients} (${wss.clients.size}) clients.`);
};

wss.answerBackWith = (data, ws) => {
    ws.send(data);
};

// Setup for websocket requests.
// Docs: https://github.com/websockets/ws/blob/master/doc/ws.md
wss.on("connection", (ws, data) => {
    console.log("Connection received. Adding client.");
    ws.on("message", (message) => {
        jsonmsg = JSON.parse(message);
        if (jsonmsg.type === 'newuser') {
            var uniquename = wss.uniquifyname(jsonmsg.content);
            wss.adduser(uniquename, ws);
            console.log(usersobject);

            playercolor = gamebrain.setPlayerColor(uniquename);

            console.log("GameBrains playernicks");
            console.log(gamebrain.getPlayersNicks());

            console.log("GameBrains playercolors");
            console.log(gamebrain.getPlayersColors());

            uniquemsg = {
                type: "uniquename",
                uniquenick: uniquename,
                colorclass: playercolor
            }
            wss.answerBackWith(JSON.stringify(uniquemsg), ws);



            msg = {
                type: "users",
                userarray: gamebrain.getPlayersNicks(),
                userscolors: gamebrain.getPlayersColors()
            }
            wss.broadcastUsers(JSON.stringify(msg));


        } else if (jsonmsg.type === 'deleteuser') {
            wss.dropuser(ws);
        } else if (jsonmsg.type === 'clientmsg') {
            msg = {
                type: "clientmsg",
                nick: jsonmsg.nick,
                content: jsonmsg.content
            }
            wss.broadcastUsers(JSON.stringify(msg));
        } else if (jsonmsg.type === 'startgame') {
            gameboard = new Gameboard(4, 4);
            msg = {
                type: "startgame",
                gameboard: gameboard
            }
            wss.broadcastUsers(JSON.stringify(msg));
        }
    });

    ws.on("error", (error) => {
        console.log(`Server error: ${error}`);
    });

    ws.on("close", (code, reason) => {
        console.log(`Closing connection: ${code} ${reason}`);
        sendusers = {
            type: "users",
            userarray: users
        }
        wss.broadcastUsers(JSON.stringify(sendusers));
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
